[{"/home/joe/Dev/p2p-chat/src/index.tsx":"1","/home/joe/Dev/p2p-chat/src/reportWebVitals.ts":"2","/home/joe/Dev/p2p-chat/src/serviceWorkerRegistration.ts":"3","/home/joe/Dev/p2p-chat/src/App.tsx":"4","/home/joe/Dev/p2p-chat/src/components/Login.tsx":"5","/home/joe/Dev/p2p-chat/src/App.config.ts":"6","/home/joe/Dev/p2p-chat/src/components/Chat.tsx":"7","/home/joe/Dev/p2p-chat/src/components/Messages.tsx":"8"},{"size":836,"mtime":1610264347454,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1609702908330,"results":"11","hashOfConfig":"10"},{"size":5256,"mtime":1609702908332,"results":"12","hashOfConfig":"10"},{"size":177,"mtime":1610814147111,"results":"13","hashOfConfig":"10"},{"size":6539,"mtime":1610814147123,"results":"14","hashOfConfig":"10"},{"size":1261,"mtime":1610814147103,"results":"15","hashOfConfig":"10"},{"size":12928,"mtime":1610822776867,"results":"16","hashOfConfig":"10"},{"size":2026,"mtime":1610822717152,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"qoxqi7",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/joe/Dev/p2p-chat/src/index.tsx",[],["37","38"],"/home/joe/Dev/p2p-chat/src/reportWebVitals.ts",[],"/home/joe/Dev/p2p-chat/src/serviceWorkerRegistration.ts",[],"/home/joe/Dev/p2p-chat/src/App.tsx",[],"/home/joe/Dev/p2p-chat/src/components/Login.tsx",["39","40","41","42","43"],"import { Component } from 'react';\nimport { Container, Box, TextField, Button, FormControlLabel, Checkbox, AppBar, Toolbar, IconButton, Typography, Grid } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CryptoJS from 'crypto-js';\nimport Peer from 'peerjs';\nimport Chat from './Chat';\nimport CLIENT_KEY, { LoginProps, LoginState, User } from '../App.config';\n\n\n/************************************************************************\n * \n */\nclass Login extends Component<LoginProps, LoginState> {\n\n  constructor(props: LoginProps | Readonly<LoginProps>) {\n    \n    super(props);\n\n    this.state = {\n      username: '',\n      password: '',\n      keepMeLoggedIn: false,\n      isLoading: false,\n      isLoggedIn: false,\n      user: {username: '', peerID: '', _id: ''}\n    };\n\n    this.handleFormFieldChange = this.handleFormFieldChange.bind(this);\n    this.login = this.login.bind(this);\n    this.submitLogin = this.submitLogin.bind(this);\n    this.submitLogout = this.submitLogout.bind(this);\n    this.logout = this.logout.bind(this);\n\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n    /**\n     * Check if logged in\n     */\n    fetch(\"/check\")\n    .then(res => res.json())\n    .then((result) => {\n      if (typeof result.username !== 'undefined') {\n        let user: User = this.state.user;\n        user.username = result.username;\n        this.setState({ isLoggedIn: true, isLoading: false, user: user});\n      } else {\n        this.setState({ isLoading: false });\n        this.keepMeLoggedIn();\n      }\n    }, (error) => {\n      console.log(error);\n      this.setState({ isLoading: false });\n      this.keepMeLoggedIn();\n    })\n  }\n\n  componentWillUnmount() {\n  \n  }\n\n  keepMeLoggedIn() {\n    let lastUser: string|null = localStorage.getItem(CryptoJS.SHA256(`persistentUser`).toString(CryptoJS.enc.Base64));\n    if (lastUser !== null) {\n      let user: any = JSON.parse(CryptoJS.AES.decrypt(lastUser, `persistentUser${CLIENT_KEY}`).toString(CryptoJS.enc.Utf8));\n      this.login(user.username, user.password, true);\n    }   \n  }\n\n  login(username: string, password: string, keepMeLoggedin: true|false) {\n    this.setState({ isLoading: true });\n    fetch('/login', { \n      method: 'POST', \n      body: JSON.stringify({ \n        username: username, \n        password: password \n      }), \n      headers: {'Content-Type': 'application/json'}\n    })\n    .then(response => response.json())\n    .then(result => {\n      if (typeof result.success !== 'undefined') {\n        let user: User = this.state.user;\n        user.username = this.state.username;\n        this.setState({ isLoggedIn: true, isLoading: false, user: user });\n        if (this.state.keepMeLoggedIn) {\n          localStorage.setItem(\n            CryptoJS.SHA256(`persistentUser`).toString(CryptoJS.enc.Base64), \n            CryptoJS.AES.encrypt(JSON.stringify({username: username, password: password}), `persistentUser${CLIENT_KEY}`).toString()\n          );\n        }\n        \n      } else this.setState({ isLoggedIn: false, isLoading: false});\n      console.log(result);\n    })\n    .catch(error => {\n      let lastUser: string|null = localStorage.getItem(CryptoJS.SHA256(`persistentUser`).toString(CryptoJS.enc.Base64));\n      if (lastUser !== null) {\n        let user: any = JSON.parse(CryptoJS.AES.decrypt(lastUser, `persistentUser${CLIENT_KEY}`).toString(CryptoJS.enc.Utf8));\n        // spoof login for offline mode\n        this.setState({ isLoggedIn: true, isLoading: false, user: {username: user.username, peerID: '', _id: ''}});\n      } else {\n        this.setState({ isLoggedIn: false, isLoading: false});\n      }\n      console.error('Error:', error);\n    });\n  }\n\n  submitLogin(e: React.SyntheticEvent) {\n    this.login(this.state.username, this.state.password, this.state.keepMeLoggedIn);\n    e.preventDefault();\n  };\n\n  submitLogout(e: React.MouseEvent) {\n    this.logout();\n  }\n\n  logout() {\n    this.setState({ isLoading: true });\n    fetch('/logout', { method: 'POST'})\n    .then(response => response.json())\n    .then(result => {\n      localStorage.removeItem(CryptoJS.SHA256(`persistentUser`).toString(CryptoJS.enc.Base64));\n    })\n    .catch(error => {\n      localStorage.removeItem(CryptoJS.SHA256(`persistentUser`).toString(CryptoJS.enc.Base64));\n    }).then(() => {\n      this.setState({ isLoading: false, isLoggedIn: false, user: {username: '', peerID: '', _id: ''} });\n    });\n  }\n\n  handleFormFieldChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.name === 'username') this.setState({ username: event.target.value });\n    else if (event.target.name === 'password') this.setState({ password: event.target.value });\n    else if (event.target.name === 'keepMeLoggedIn') this.setState({ keepMeLoggedIn: event.target.checked });\n  }\n\n\n\n\n  render() {\n    const { username, password, keepMeLoggedIn, isLoading, isLoggedIn, user } = this.state;\n    \n    if (isLoading) return(<></>);\n    \n    else if (isLoggedIn) {\n      const localPeer = new Peer({\n        host: window.location.hostname,\n        port: 9000, \n        path: '/peerserver'\n      });\n      return (\n      <>\n      <Grid container spacing={0}>  \n        <Chat localPeer={localPeer} user={user} />\n      </Grid>\n      </>\n      );\n    }\n    \n    else {\n      return (\n        <Container>\n          <Box m={2}>\n            <form onSubmit={(e: React.SyntheticEvent) => { this.submitLogin(e) }}>\n              <Box pt={2} >\n                <TextField required value={username} name=\"username\" onChange={this.handleFormFieldChange} variant=\"outlined\" label=\"username\" type=\"text\"  />\n              </Box>\n              <Box pt={2}>\n                <TextField required value={password} name=\"password\" onChange={this.handleFormFieldChange} variant=\"outlined\" label=\"password\" type=\"password\" />\n              </Box>\n              <Box pt={1} pl={1}>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={keepMeLoggedIn}\n                      onChange={this.handleFormFieldChange}\n                      name=\"keepMeLoggedIn\"\n                      color=\"secondary\"\n                    />\n                  }\n                  label=\"Keep me logged in\"\n                />\n              </Box>\n              <Box pt={2}> \n                <Button type='submit' size=\"large\" variant=\"contained\" color=\"primary\">Login</Button>\n              </Box>\n            </form>\n          </Box>\n        </Container>\n      );\n    }\n  }\n  \n}\n\n\n\nexport default Login;\n","/home/joe/Dev/p2p-chat/src/App.config.ts",["44"],"import Peer from 'peerjs' // used for ChatState type\n\nconst CLIENT_KEY : string = 'AfxKcLYZTn9SWcDZL';\n\ntype LoginProps = {\n\n}\n\ntype LoginState = {\n  username: string,\n  password: string,\n  keepMeLoggedIn: true|false,\n  isLoading: Boolean,\n  isLoggedIn: Boolean,\n  user: User\n}\n\ntype ChatProps = {\n    localPeer: Peer,\n    user: User\n  }\n  \ntype ChatState = {\n    localPeer: Peer,\n    user: User,\n    remotePeers: {[key: string]: User},\n    onlinePeers: {[key: string]: User},\n    selectedRemotePeer: User,\n    textMessage: string,\n    connections: Connections,\n    messages: Messages,\n    lastMessage: Message|Object\n}\n\ninterface Connections {\n    [key: string]: any\n}\n\ninterface User {\n    username: string,\n    peerID: string,\n    _id: string\n}\n  \ninterface Message {\n    message: { username: string, message: string},\n    from: string,\n    timestamp: string,\n    seen: Boolean\n}\n\ninterface Messages {\n    [key: string]: Message[]\n}\n\ntype MessagesProps = {\n    messages: Message[],\n    localUsername: string,\n    remoteUsername: string,\n    lastMessage: Message|Object\n  }\n\nexport type {\n    LoginProps,\n    LoginState,\n    ChatProps,\n    ChatState,\n    Connections,\n    User,\n    Message,\n    Messages,\n    MessagesProps\n}\n\nexport default {\n    CLIENT_KEY\n}","/home/joe/Dev/p2p-chat/src/components/Chat.tsx",[],"/home/joe/Dev/p2p-chat/src/components/Messages.tsx",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":2,"column":73,"nodeType":"51","messageId":"52","endLine":2,"endColumn":79},{"ruleId":"49","severity":1,"message":"53","line":2,"column":81,"nodeType":"51","messageId":"52","endLine":2,"endColumn":88},{"ruleId":"49","severity":1,"message":"54","line":2,"column":90,"nodeType":"51","messageId":"52","endLine":2,"endColumn":100},{"ruleId":"49","severity":1,"message":"55","line":2,"column":102,"nodeType":"51","messageId":"52","endLine":2,"endColumn":112},{"ruleId":"49","severity":1,"message":"56","line":3,"column":8,"nodeType":"51","messageId":"52","endLine":3,"endColumn":16},{"ruleId":"57","severity":1,"message":"58","line":75,"column":1,"nodeType":"59","endLine":77,"endColumn":2},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"@typescript-eslint/no-unused-vars","'AppBar' is defined but never used.","Identifier","unusedVar","'Toolbar' is defined but never used.","'IconButton' is defined but never used.","'Typography' is defined but never used.","'MenuIcon' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]