[{"/home/joe/Dev/p2p-chat/src/index.tsx":"1","/home/joe/Dev/p2p-chat/src/reportWebVitals.ts":"2","/home/joe/Dev/p2p-chat/src/serviceWorkerRegistration.ts":"3","/home/joe/Dev/p2p-chat/src/App.tsx":"4","/home/joe/Dev/p2p-chat/src/components/Login.tsx":"5","/home/joe/Dev/p2p-chat/src/components/Chat.tsx":"6","/home/joe/Dev/p2p-chat/src/App.config.ts":"7","/home/joe/Dev/p2p-chat/src/components/Messages.tsx":"8"},{"size":836,"mtime":1610264347454,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1609702908330,"results":"11","hashOfConfig":"10"},{"size":5256,"mtime":1609702908332,"results":"12","hashOfConfig":"10"},{"size":177,"mtime":1610814147111,"results":"13","hashOfConfig":"10"},{"size":4277,"mtime":1610994901540,"results":"14","hashOfConfig":"10"},{"size":15307,"mtime":1610993640183,"results":"15","hashOfConfig":"10"},{"size":1290,"mtime":1610993583947,"results":"16","hashOfConfig":"10"},{"size":2026,"mtime":1610832618513,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"qoxqi7",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/joe/Dev/p2p-chat/src/index.tsx",[],["37","38"],"/home/joe/Dev/p2p-chat/src/reportWebVitals.ts",[],"/home/joe/Dev/p2p-chat/src/serviceWorkerRegistration.ts",[],"/home/joe/Dev/p2p-chat/src/App.tsx",[],"/home/joe/Dev/p2p-chat/src/components/Login.tsx",["39","40","41","42","43","44"],"import { Component } from 'react';\nimport { Container, Box, TextField, Button, FormControlLabel, Checkbox, AppBar, Toolbar, IconButton, Typography, Grid } from '@material-ui/core';\nimport Chat from './Chat';\nimport { LoginProps, LoginState, User } from '../App.config';\n\n\n/************************************************************************\n * \n */\nclass Login extends Component<LoginProps, LoginState> {\n\n  constructor(props: LoginProps | Readonly<LoginProps>) {\n    \n    super(props);\n\n    this.state = {\n      username: '',\n      password: '',\n      isLoading: false,\n      isLoggedIn: false,\n      user: {username: '', peerID: ''},\n      token: false\n    };\n\n    this.handleFormFieldChange = this.handleFormFieldChange.bind(this);\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.submitLogin = this.submitLogin.bind(this);\n    this.submitLogout = this.submitLogout.bind(this);\n\n  }\n\n  componentDidMount() {\n\n    this.setState({ isLoading: true });\n    /**\n    * Refresh token\n    */\n    fetch('/refreshtoken', {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'}\n    })\n    .then(res => res.json())\n    .then((result) => {\n      if (typeof result.username !== 'undefined') {\n        this.setState({ \n          isLoggedIn: true, \n          isLoading: false, \n          user: { username: result.username, peerID: ''}, \n          token: result.token\n        });\n      } else {\n        this.setState({ isLoggedIn: false, isLoading: false });\n      }\n    }, (error) => {\n      // check if offline mode enabled\n      console.log(error);\n      this.setState({ isLoggedIn: false, isLoading: false });\n    });\n      \n    \n  }\n\n\n  login(username: string, password: string) {\n    this.setState({ isLoading: true });\n    fetch('/login', { \n      method: 'POST', \n      body: JSON.stringify({ \n        username: username, \n        password: password \n      }), \n      headers: {'Content-Type': 'application/json'}\n    })\n    .then(response => response.json())\n    .then(result => {\n      if (typeof result.success !== 'undefined') {\n        let user: User = this.state.user;\n        user.username = this.state.username;\n        this.setState({ isLoggedIn: true, isLoading: false, user: user, token: result.token });\n      } else this.setState({ isLoggedIn: false, isLoading: false});\n      console.log(result);\n    })\n    .catch(error => {\n      this.setState({ isLoggedIn: false, isLoading: false});\n      console.error('Error:', error);\n    });\n  }\n\n\n  submitLogin(e: React.SyntheticEvent) {\n    this.login(this.state.username, this.state.password);\n    e.preventDefault();\n  };\n\n\n  submitLogout(e: React.MouseEvent) {\n    this.logout();\n  }\n\n\n  logout() {\n    this.setState({ \n      isLoading: false, \n      isLoggedIn: false, \n      user: {username: '', peerID: ''}, \n      token: false\n    });\n  }\n\n  handleFormFieldChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.name === 'username') this.setState({ username: event.target.value });\n    else if (event.target.name === 'password') this.setState({ password: event.target.value });\n  }\n\n\n  render() {\n    const { username, password, isLoading, isLoggedIn, user, token } = this.state;\n    \n    if (isLoading) return(<></>);\n    \n    else if (isLoggedIn) {\n\n      return (\n      <>\n      <Grid container spacing={0}>  \n        <Chat user={user} token={token} />\n      </Grid>\n      </>\n      );\n    }\n    \n    else {\n      return (\n        <Container>\n          <Box m={2}>\n            <form onSubmit={(e: React.SyntheticEvent) => { this.submitLogin(e) }}>\n              <Box pt={2} >\n                <TextField required value={username} name=\"username\" onChange={this.handleFormFieldChange} variant=\"outlined\" label=\"username\" type=\"text\"  />\n              </Box>\n              <Box pt={2}>\n                <TextField required value={password} name=\"password\" onChange={this.handleFormFieldChange} variant=\"outlined\" label=\"password\" type=\"password\" />\n              </Box>\n              <Box pt={2}> \n                <Button type='submit' size=\"large\" variant=\"contained\" color=\"primary\">Login</Button>\n              </Box>\n            </form>\n          </Box>\n        </Container>\n      );\n    }\n  }\n  \n}\n\n\n\nexport default Login;\n","/home/joe/Dev/p2p-chat/src/components/Chat.tsx",[],"/home/joe/Dev/p2p-chat/src/App.config.ts",["45"],"import Peer from 'peerjs' // used for ChatState type\n\n\nconst CLIENT_KEY : string = 'AfxKcLYZTn9SWcDZL';\n\ntype LoginProps = {\n\n}\n\ntype LoginState = {\n  username: string,\n  password: string,\n  isLoading: Boolean,\n  isLoggedIn: Boolean,\n  user: User,\n  token: string|false,\n}\n\ntype ChatProps = {\n    user: User,\n    token: string|false,\n}\n  \ntype ChatState = {\n    peer: Peer|null,\n    user: User,\n    remotePeers: {[key: string]: User},\n    onlinePeers: {[key: string]: User},\n    selectedRemotePeer: User,\n    textMessage: string,\n    connections: Connections,\n    messages: Messages,\n    lastMessage: Message|Object,\n    offline: Boolean,\n    token: string|false,\n}\n\ninterface Connections {\n    [key: string]: any\n}\n\ninterface User {\n    username: string,\n    peerID: string\n}\n  \ninterface Message {\n    message: { username: string, message: string},\n    from: string,\n    timestamp: string,\n    seen: Boolean\n}\n\ninterface Messages {\n    [key: string]: Message[]\n}\n\ntype MessagesProps = {\n    messages: Message[],\n    localUsername: string,\n    remoteUsername: string,\n    lastMessage: Message|Object\n  }\n\nexport type {\n    LoginProps,\n    LoginState,\n    ChatProps,\n    ChatState,\n    Connections,\n    User,\n    Message,\n    Messages,\n    MessagesProps\n}\n\nexport default {\n    CLIENT_KEY\n}","/home/joe/Dev/p2p-chat/src/components/Messages.tsx",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":2,"column":45,"nodeType":"52","messageId":"53","endLine":2,"endColumn":61},{"ruleId":"50","severity":1,"message":"54","line":2,"column":63,"nodeType":"52","messageId":"53","endLine":2,"endColumn":71},{"ruleId":"50","severity":1,"message":"55","line":2,"column":73,"nodeType":"52","messageId":"53","endLine":2,"endColumn":79},{"ruleId":"50","severity":1,"message":"56","line":2,"column":81,"nodeType":"52","messageId":"53","endLine":2,"endColumn":88},{"ruleId":"50","severity":1,"message":"57","line":2,"column":90,"nodeType":"52","messageId":"53","endLine":2,"endColumn":100},{"ruleId":"50","severity":1,"message":"58","line":2,"column":102,"nodeType":"52","messageId":"53","endLine":2,"endColumn":112},{"ruleId":"59","severity":1,"message":"60","line":77,"column":1,"nodeType":"61","endLine":79,"endColumn":2},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"@typescript-eslint/no-unused-vars","'FormControlLabel' is defined but never used.","Identifier","unusedVar","'Checkbox' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'IconButton' is defined but never used.","'Typography' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]